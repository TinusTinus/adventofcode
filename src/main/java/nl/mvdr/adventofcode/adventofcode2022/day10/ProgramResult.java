package nl.mvdr.adventofcode.adventofcode2022.day10;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Result of running a program.
 *
 * @param signalStrengthSum the signal strength during the 20th cycle and every 40 cycles after that
 *          (that is, during the 20th, 60th, 100th, 140th, 180th, and 220th cycles)
 * @param image the image generated by the program
 *
 * @author Martijn van de Rijdt
 */
record ProgramResult(int signalStrengthSum, String image) {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(ProgramResult.class);
    
    /**
     * Parses and executes the given program.
     * 
     * @param linesStream puzzle input
     * @return result
     */
    static ProgramResult get(Stream<String> linesStream) {
        List<AtomicInstruction> program = parseProgram(linesStream);
        return execute(program);
    }

    /**
     * Parses the puzzle input into a program.
     * 
     * @param linesStream puzzle input
     * @return program
     */
    private static List<AtomicInstruction> parseProgram(Stream<String> linesStream) {
        var lines = linesStream.toList();
        
        List<AtomicInstruction> program = new ArrayList<>();
        for (var line : lines) {
            if ("noop".equals(line)) {
                program.add(NoopInstruction.INSTANCE);
            } else if (line.startsWith("addx ")) {
                var value = Integer.parseInt(line.substring(5));
                // The addx instruction takes two cycles.
                // Model this by splitting it up into two single-cycle operations: noop and the actual add.
                program.add(NoopInstruction.INSTANCE);
                program.add(new AtomicAddXInstruction(value));
            } else {
                throw new IllegalArgumentException("Unable to parse line: " + line);
            }
        }
        return program;
    }
    
    /**
     * Executes the given program.
     * 
     * @param program list of instructions, where every instruction takes exactly one cycle
     * @return result of executing the given program
     */
    private static ProgramResult execute(List<AtomicInstruction> program) {
        var x = 1;
        var cycle = 0;
        var signalStrengthSum = 0;
        var image = new StringBuilder();
        
        for (AtomicInstruction instruction : program) {
            cycle++;
            
            int cycleMod40 = cycle % 40;
            
            if (cycleMod40 == 20) {
                int signalStrength = cycle * x;
                LOGGER.debug("Signal strength during cycle {}: {}", Integer.valueOf(cycle), Integer.valueOf(signalStrength));
                signalStrengthSum = signalStrengthSum + signalStrength;
            }

            if (Math.abs(x - cycleMod40) <= 1) {
                image.append("#");
            } else {
                image.append(".");
            }
            if (cycleMod40 == 0) {
                image.append("\n");
            }
            
            x = instruction.perform(x);
            LOGGER.debug("x = {} after cycle {}, last atomic instruction was: {}", Integer.valueOf(x), Integer.valueOf(cycle), instruction);
        }
        
        return new ProgramResult(signalStrengthSum, image.toString());
    }
}
